function solution(word) {
    let alphabet = ["A", "E", "I", "O", "U"];
    var dict = [];

    function recursion(str, n) {
        dict.push(str);

        if (n === 5) return;
        
        // 재귀 부분
        for (let i = 0; i < 5; i++) {
            recursion(str + alphabet[i], n + 1);
        }
    }
    
    recursion("", 0);
    dict.sort();
    
    return dict.indexOf(word);
}

// 테스트 1 〉	통과 (0.96ms, 33.7MB)
// 테스트 2 〉	통과 (1.24ms, 33.7MB)
// 테스트 3 〉	통과 (1.15ms, 33.7MB)
// 테스트 4 〉	통과 (1.19ms, 33.6MB)
// 테스트 5 〉	통과 (1.13ms, 33.6MB)
// 테스트 6 〉	통과 (0.65ms, 33.7MB)
// 테스트 7 〉	통과 (0.71ms, 33.6MB)
// 테스트 8 〉	통과 (0.68ms, 33.6MB)
// 테스트 9 〉	통과 (0.63ms, 33.7MB)
// 테스트 10 〉	통과 (1.08ms, 33.6MB)
// 테스트 11 〉	통과 (0.63ms, 33.6MB)
// 테스트 12 〉	통과 (0.70ms, 33.8MB)
// 테스트 13 〉	통과 (0.66ms, 33.6MB)
// 테스트 14 〉	통과 (0.87ms, 33.6MB)
// 테스트 15 〉	통과 (0.66ms, 33.7MB)
// 테스트 16 〉	통과 (0.65ms, 33.6MB)
// 테스트 17 〉	통과 (0.67ms, 33.7MB)
// 테스트 18 〉	통과 (0.65ms, 33.6MB)
// 테스트 19 〉	통과 (0.65ms, 33.7MB)
// 테스트 20 〉	통과 (0.67ms, 33.6MB)
// 테스트 21 〉	통과 (0.62ms, 33.7MB)
// 테스트 22 〉	통과 (0.63ms, 33.6MB)
// 테스트 23 〉	통과 (0.63ms, 33.6MB)
// 테스트 24 〉	통과 (1.09ms, 33.6MB)
// 테스트 25 〉	통과 (1.12ms, 33.6MB)
// 테스트 26 〉	통과 (0.70ms, 33.7MB)
// 테스트 27 〉	통과 (0.64ms, 33.6MB)
// 테스트 28 〉	통과 (0.70ms, 33.7MB)
// 테스트 29 〉	통과 (0.67ms, 33.6MB)
// 테스트 30 〉	통과 (0.65ms, 33.6MB)
// 테스트 31 〉	통과 (1.11ms, 33.6MB)
// 테스트 32 〉	통과 (0.63ms, 33.7MB)
// 테스트 33 〉	통과 (0.64ms, 33.7MB)
// 테스트 34 〉	통과 (0.64ms, 33.6MB)
// 테스트 35 〉	통과 (0.67ms, 33.6MB)
// 테스트 36 〉	통과 (0.63ms, 33.6MB)
// 테스트 37 〉	통과 (0.67ms, 33.8MB)
// 테스트 38 〉	통과 (0.90ms, 33.6MB)
// 테스트 39 〉	통과 (0.63ms, 33.7MB)
// 테스트 40 〉	통과 (0.68ms, 33.8MB)
